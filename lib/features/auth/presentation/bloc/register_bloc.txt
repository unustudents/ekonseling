import 'dart:async';
import 'package:bloc/bloc.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:meta/meta.dart';

part 'register_event.dart';
part 'register_state.dart';

class RegisterBloc extends Bloc<RegisterEvent, RegisterState> {
  final FirebaseAuth _firebaseAuth;

  RegisterBloc() : _firebaseAuth = FirebaseAuth.instance, super(RegisterInitial());

  // Key untuk validasi form
  final formKey = GlobalKey<FormState>();

  @override
  Stream<RegisterState> mapEventToState(RegisterEvent event) async* {
    if (event is NameChanged) {
      yield state.copyWith(name: event.name);
    } else if (event is NIMChanged) {
      yield state.copyWith(nim: event.nim);
    } else if (event is EmailChanged) {
      yield state.copyWith(email: event.email);
    } else if (event is PasswordChanged) {
      yield state.copyWith(password: event.password);
    } else if (event is ConfirmPasswordChanged) {
      yield state.copyWith(confirmPassword: event.confirmPassword);
    } else if (event is SubmitRegistration) {
      yield* _mapSubmitRegistrationToState();
    }
  }

  // Validasi Email
  String? validateEmail(String? email) {
    if (email == null || email.isEmpty) {
      return 'Email tidak boleh kosong';
    }
    final emailRegex = RegExp(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\$');
    if (!emailRegex.hasMatch(email)) {
      return 'Format email tidak valid';
    }
    return null;
  }

  // Validasi Password
  String? validatePassword(String? password) {
    if (password == null || password.isEmpty) {
      return 'Password tidak boleh kosong';
    }
    if (password.length < 6) {
      return 'Password minimal 6 karakter';
    }
    return null;
  }

  // Validasi Konfirmasi Password
  String? validateConfirmPassword(String? confirmPassword, String? password) {
    if (confirmPassword == null || confirmPassword.isEmpty) {
      return 'Konfirmasi password tidak boleh kosong';
    }
    if (confirmPassword != password) {
      return 'Konfirmasi password tidak sesuai';
    }
    return null;
  }

  // Fungsi submit registrasi
  Stream<RegisterState> _mapSubmitRegistrationToState() async* {
    if (!formKey.currentState!.validate()) {
      yield RegisterFailure(error: 'Form tidak valid.');
      return;
    }

    try {
      yield RegisterLoading();

      // Firebase Authentication untuk registrasi user baru
      final userCredential = await _firebaseAuth.createUserWithEmailAndPassword(
        email: state.email,
        password: state.password,
      );

      // Setelah sukses, tampilkan hasil sukses
      yield RegisterSuccess(user: userCredential.user);
    } catch (e) {
      yield RegisterFailure(error: e.toString());
    }
  }
}
